/*
 * This file is generated by jOOQ.
 */
package com.example.technicaltest.jooq.tables;


import com.example.technicaltest.jooq.Keys;
import com.example.technicaltest.jooq.TechnicalTest;
import com.example.technicaltest.jooq.tables.records.AiAnalysisLogRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AiAnalysisLog extends TableImpl<AiAnalysisLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>technical_test.ai_analysis_log</code>
     */
    public static final AiAnalysisLog AI_ANALYSIS_LOG = new AiAnalysisLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AiAnalysisLogRecord> getRecordType() {
        return AiAnalysisLogRecord.class;
    }

    /**
     * The column <code>technical_test.ai_analysis_log.id</code>.
     */
    public final TableField<AiAnalysisLogRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>technical_test.ai_analysis_log.image_path</code>.
     */
    public final TableField<AiAnalysisLogRecord, String> IMAGE_PATH = createField(DSL.name("image_path"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>technical_test.ai_analysis_log.success</code>.
     */
    public final TableField<AiAnalysisLogRecord, String> SUCCESS = createField(DSL.name("success"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>technical_test.ai_analysis_log.message</code>.
     */
    public final TableField<AiAnalysisLogRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>technical_test.ai_analysis_log.class</code>.
     */
    public final TableField<AiAnalysisLogRecord, Integer> CLASS = createField(DSL.name("class"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>technical_test.ai_analysis_log.confidence</code>.
     */
    public final TableField<AiAnalysisLogRecord, BigDecimal> CONFIDENCE = createField(DSL.name("confidence"), SQLDataType.DECIMAL(5, 4), this, "");

    /**
     * The column <code>technical_test.ai_analysis_log.request_timestamp</code>.
     */
    public final TableField<AiAnalysisLogRecord, UInteger> REQUEST_TIMESTAMP = createField(DSL.name("request_timestamp"), SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>technical_test.ai_analysis_log.response_timestamp</code>.
     */
    public final TableField<AiAnalysisLogRecord, UInteger> RESPONSE_TIMESTAMP = createField(DSL.name("response_timestamp"), SQLDataType.INTEGERUNSIGNED, this, "");

    private AiAnalysisLog(Name alias, Table<AiAnalysisLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private AiAnalysisLog(Name alias, Table<AiAnalysisLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>technical_test.ai_analysis_log</code> table reference
     */
    public AiAnalysisLog(String alias) {
        this(DSL.name(alias), AI_ANALYSIS_LOG);
    }

    /**
     * Create an aliased <code>technical_test.ai_analysis_log</code> table reference
     */
    public AiAnalysisLog(Name alias) {
        this(alias, AI_ANALYSIS_LOG);
    }

    /**
     * Create a <code>technical_test.ai_analysis_log</code> table reference
     */
    public AiAnalysisLog() {
        this(DSL.name("ai_analysis_log"), null);
    }

    public <O extends Record> AiAnalysisLog(Table<O> child, ForeignKey<O, AiAnalysisLogRecord> key) {
        super(child, key, AI_ANALYSIS_LOG);
    }

    @Override
    public Schema getSchema() {
        return TechnicalTest.TECHNICAL_TEST;
    }

    @Override
    public Identity<AiAnalysisLogRecord, Integer> getIdentity() {
        return (Identity<AiAnalysisLogRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AiAnalysisLogRecord> getPrimaryKey() {
        return Keys.KEY_AI_ANALYSIS_LOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<AiAnalysisLogRecord>> getKeys() {
        return Arrays.<UniqueKey<AiAnalysisLogRecord>>asList(Keys.KEY_AI_ANALYSIS_LOG_PRIMARY);
    }

    @Override
    public AiAnalysisLog as(String alias) {
        return new AiAnalysisLog(DSL.name(alias), this);
    }

    @Override
    public AiAnalysisLog as(Name alias) {
        return new AiAnalysisLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AiAnalysisLog rename(String name) {
        return new AiAnalysisLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AiAnalysisLog rename(Name name) {
        return new AiAnalysisLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, Integer, BigDecimal, UInteger, UInteger> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
